import cv2
import face_recognition
import pickle
import datetime
import os
import threading
from collections import defaultdict
import pandas as pd
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk

# ========== SETUP ==========
SNAPSHOT_DIR = "snapshots"
os.makedirs(SNAPSHOT_DIR, exist_ok=True)

with open("dataset/encodings.pkl", "rb") as f:
    data = pickle.load(f)

known_face_names = list(data.keys())
known_face_encodings = list(data.values())

presence_log = defaultdict(set)
snapshot_saved = {}
session_date = datetime.datetime.now().strftime("%Y-%m-%d")

# GUI Window
root = tk.Tk()
root.title("Face Recognition Attendance System")
root.geometry("800x600")

video_label = tk.Label(root)
video_label.pack()

running = False
video_capture = None


def start_attendance():
    global running, video_capture
    running = True
    video_capture = cv2.VideoCapture(0)
    threading.Thread(target=process_video, daemon=True).start()


def stop_attendance():
    global running
    running = False
    if video_capture:
        video_capture.release()
    save_attendance()
    messagebox.showinfo("Done", "Attendance saved successfully!")


def save_attendance():
    csv_path = "attendance.csv"
    with open(csv_path, "w") as f:
        f.write("Name,Minutes Present,Status,Date,Snapshot Path\n")
        for name, minutes in presence_log.items():
            count = len(minutes)
            status = "Present" if count >= 30 else "Absent"
            path = snapshot_saved.get(name, "None")
            f.write(f"{name},{count},{status},{session_date},{path}\n")

    # Save to Excel
    df = pd.read_csv(csv_path)
    df.to_excel("attendance.xlsx", index=False)


def process_video():
    global running, video_capture

    while running:
        ret, frame = video_capture.read()
        if not ret:
            continue

        # Resize frame
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)

        # Face recognition
        face_locations = face_recognition.face_locations(rgb_small_frame)
        face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

        now = datetime.datetime.now()
        minute_str = now.strftime("%Y-%m-%d %H:%M")

        for face_encoding, location in zip(face_encodings, face_locations):
            matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
            face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
            name = "Unknown"

            if len(face_distances) > 0:
                best_match_index = face_distances.argmin()
                if matches[best_match_index]:
                    name = known_face_names[best_match_index]

            if name != "Unknown":
                presence_log[name].add(minute_str)

                if name not in snapshot_saved:
                    top, right, bottom, left = location
                    top *= 4
                    right *= 4
                    bottom *= 4
                    left *= 4
                    face_crop = frame[top:bottom, left:right]
                    timestamp = now.strftime("%Y%m%d_%H%M%S")
                    filename = f"{name}_{timestamp}.jpg"
                    path = os.path.join(SNAPSHOT_DIR, filename)
                    cv2.imwrite(path, face_crop)
                    snapshot_saved[name] = path

            # Draw on frame
            top, right, bottom, left = location
            top *= 4
            right *= 4
            bottom *= 4
            left *= 4
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
            cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 255, 0), cv2.FILLED)
            cv2.putText(frame, name, (left + 6, bottom - 6), cv2.FONT_HERSHEY_DUPLEX, 0.6, (0, 0, 0), 1)

        # Display frame in GUI
        img = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(img)
        imgtk = ImageTk.PhotoImage(image=img)
        video_label.imgtk = imgtk
        video_label.configure(image=imgtk)

    # Stop camera when loop ends
    if video_capture:
        video_capture.release()


# ========== GUI Buttons ==========
btn_frame = tk.Frame(root)
btn_frame.pack(pady=10)

start_btn = tk.Button(btn_frame, text="Start Attendance", command=start_attendance, width=20, bg="green", fg="white")
start_btn.grid(row=0, column=0, padx=10)

stop_btn = tk.Button(btn_frame, text="Stop & Save", command=stop_attendance, width=20, bg="red", fg="white")
stop_btn.grid(row=0, column=1, padx=10)

# ========== Start GUI ==========
root.mainloop()
